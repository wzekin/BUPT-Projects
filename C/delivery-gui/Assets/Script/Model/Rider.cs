//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Rider : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Rider(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Rider obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Rider() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          delivery_modelPINVOKE.delete_Rider(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Rider(Point position) : this(delivery_modelPINVOKE.new_Rider(Point.getCPtr(position)), true) {
    if (delivery_modelPINVOKE.SWIGPendingException.Pending) throw delivery_modelPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Step(uint time) {
    delivery_modelPINVOKE.Rider_Step(swigCPtr, time);
  }

  public void AddOrder(Order r) {
    delivery_modelPINVOKE.Rider_AddOrder(swigCPtr, Order.getCPtr(r));
    if (delivery_modelPINVOKE.SWIGPendingException.Pending) throw delivery_modelPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ChangePath(SWIGTYPE_p_std__queueT_Point_t path, int all_cost) {
    delivery_modelPINVOKE.Rider_ChangePath(swigCPtr, SWIGTYPE_p_std__queueT_Point_t.getCPtr(path), all_cost);
    if (delivery_modelPINVOKE.SWIGPendingException.Pending) throw delivery_modelPINVOKE.SWIGPendingException.Retrieve();
  }

  public Point position() {
    Point ret = new Point(delivery_modelPINVOKE.Rider_position(swigCPtr), true);
    return ret;
  }

  public int illegal_orders() {
    int ret = delivery_modelPINVOKE.Rider_illegal_orders(swigCPtr);
    return ret;
  }

  public OrderVector outdate_orders() {
    OrderVector ret = new OrderVector(delivery_modelPINVOKE.Rider_outdate_orders(swigCPtr), false);
    return ret;
  }

  public OrderVector finished_orders() {
    OrderVector ret = new OrderVector(delivery_modelPINVOKE.Rider_finished_orders(swigCPtr), false);
    return ret;
  }

  public IntVector outdate_orders_now() {
    IntVector ret = new IntVector(delivery_modelPINVOKE.Rider_outdate_orders_now(swigCPtr), false);
    return ret;
  }

  public IntVector finished_orders_now() {
    IntVector ret = new IntVector(delivery_modelPINVOKE.Rider_finished_orders_now(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__setT_Order_t received_orders() {
    SWIGTYPE_p_std__setT_Order_t ret = new SWIGTYPE_p_std__setT_Order_t(delivery_modelPINVOKE.Rider_received_orders(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__setT_Order_t sending_orders() {
    SWIGTYPE_p_std__setT_Order_t ret = new SWIGTYPE_p_std__setT_Order_t(delivery_modelPINVOKE.Rider_sending_orders(swigCPtr), false);
    return ret;
  }

  public PointVector dock_points() {
    PointVector ret = new PointVector(delivery_modelPINVOKE.Rider_dock_points(swigCPtr), false);
    return ret;
  }

  public int all_cost() {
    int ret = delivery_modelPINVOKE.Rider_all_cost(swigCPtr);
    return ret;
  }

}
