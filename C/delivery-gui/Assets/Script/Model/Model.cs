//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Model : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Model(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Model obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Model() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          delivery_modelPINVOKE.delete_Model(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Model(Point init_position) : this(delivery_modelPINVOKE.new_Model(Point.getCPtr(init_position)), true) {
    if (delivery_modelPINVOKE.SWIGPendingException.Pending) throw delivery_modelPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddOrder(Order o) {
    delivery_modelPINVOKE.Model_AddOrder__SWIG_0(swigCPtr, Order.getCPtr(o));
    if (delivery_modelPINVOKE.SWIGPendingException.Pending) throw delivery_modelPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddOrder(int n, int time, int x1, int y1, int x2, int y2) {
    delivery_modelPINVOKE.Model_AddOrder__SWIG_1(swigCPtr, n, time, x1, y1, x2, y2);
  }

  public void Step() {
    delivery_modelPINVOKE.Model_Step(swigCPtr);
  }

  public int num_all() {
    int ret = delivery_modelPINVOKE.Model_num_all(swigCPtr);
    return ret;
  }

  public int num_finished() {
    int ret = delivery_modelPINVOKE.Model_num_finished(swigCPtr);
    return ret;
  }

  public int num_outdate() {
    int ret = delivery_modelPINVOKE.Model_num_outdate(swigCPtr);
    return ret;
  }

  public int money() {
    int ret = delivery_modelPINVOKE.Model_money(swigCPtr);
    return ret;
  }

  public int time() {
    int ret = delivery_modelPINVOKE.Model_time(swigCPtr);
    return ret;
  }

  public ProgramStatus statu() {
    ProgramStatus ret = (ProgramStatus)delivery_modelPINVOKE.Model_statu(swigCPtr);
    return ret;
  }

  public RiderVector riders {
    set {
      delivery_modelPINVOKE.Model_riders_set(swigCPtr, RiderVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = delivery_modelPINVOKE.Model_riders_get(swigCPtr);
      RiderVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RiderVector(cPtr, false);
      return ret;
    } 
  }

}
